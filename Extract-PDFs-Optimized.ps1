#Requires -Version 5.0

<#
.LICENSE
    MIT License
    
    Copyright (c) 2024 Sehktel
    GitHub: https://github.com/Sehktel/pdf-extractor-scripts
    
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

.SYNOPSIS
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è PDF —Ñ–∞–π–ª–æ–≤ –∏–∑ ZIP –∞—Ä—Ö–∏–≤–∞
.DESCRIPTION
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ ZIP –∞—Ä—Ö–∏–≤—É –±–µ–∑ –ø–æ–ª–Ω–æ–π —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏.
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫.
    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –ø–æ –ø–∞–º—è—Ç–∏ –∏ –¥–∏—Å–∫–æ–≤–æ–º—É –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É.
.PARAMETER SourceArchive
    –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É ZIP –∞—Ä—Ö–∏–≤—É (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)
.PARAMETER DestinationDirectory
    –¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö PDF —Ñ–∞–π–ª–æ–≤ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)
.PARAMETER IncludeSubdirectories
    –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: true)
.PARAMETER OverwriteExisting
    –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: false)
.PARAMETER ShowProgress
    –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: true)
.EXAMPLE
    .\Extract-PDFs-Optimized.ps1 -SourceArchive "C:\Downloads\CourseArchive.zip" -DestinationDirectory "C:\ExtractedPDFs"
.EXAMPLE
    .\Extract-PDFs-Optimized.ps1 -SourceArchive ".\MyArchive.zip" -DestinationDirectory ".\PDFs" -OverwriteExisting $true -LogLevel "Verbose"
#>

[CmdletBinding()]
param(
    [Parameter(Mandatory = $true, Position = 0, HelpMessage = "–ü—É—Ç—å –∫ ZIP –∞—Ä—Ö–∏–≤—É")]
    [ValidateScript({
        if (-not (Test-Path $_ -PathType Leaf)) {
            throw "–§–∞–π–ª –∞—Ä—Ö–∏–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $_"
        }
        if (-not ($_ -match '\.zip$')) {
            throw "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .zip: $_"
        }
        return $true
    })]
    [string]$SourceArchive,
    
    [Parameter(Mandatory = $true, Position = 1, HelpMessage = "–¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è")]
    [string]$DestinationDirectory,
    
    [Parameter(Mandatory = $false)]
    [bool]$IncludeSubdirectories = $true,
    
    [Parameter(Mandatory = $false)]
    [bool]$OverwriteExisting = $false,
    
    [Parameter(Mandatory = $false)]
    [bool]$ShowProgress = $true,
    
    [Parameter(Mandatory = $false)]
    [ValidateSet("Quiet", "Normal", "Verbose")]
    [string]$LogLevel = "Normal"
)

# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö .NET —Å–±–æ—Ä–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ZIP –∞—Ä—Ö–∏–≤–∞–º–∏
Add-Type -AssemblyName System.IO.Compression
Add-Type -AssemblyName System.IO.Compression.FileSystem

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–∏
class ExtractionResult {
    [int]$TotalEntriesInArchive
    [int]$PdfFilesFound
    [int]$PdfFilesExtracted
    [int]$ErrorsOccurred
    [long]$TotalArchiveSize
    [long]$ExtractedPdfSize
    [string[]]$ExtractedFiles
    [string[]]$Errors
    
    ExtractionResult() {
        $this.ExtractedFiles = @()
        $this.Errors = @()
    }
}

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
function Write-Log {
    param(
        [string]$Message,
        [ValidateSet("Info", "Success", "Warning", "Error", "Verbose")]
        [string]$Level = "Info",
        [string]$LogLevel = "Normal"
    )
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —É—Ä–æ–≤–Ω—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if ($LogLevel -eq "Quiet") { return }
    if ($LogLevel -eq "Normal" -and $Level -eq "Verbose") { return }
    
    $timestamp = Get-Date -Format "HH:mm:ss"
    $colors = @{
        "Info" = "Cyan"
        "Success" = "Green" 
        "Warning" = "Yellow"
        "Error" = "Red"
        "Verbose" = "Gray"
    }
    
    $prefix = switch($Level) {
        "Success" { "‚úÖ" }
        "Warning" { "‚ö†Ô∏è" }
        "Error" { "‚ùå" }
        "Verbose" { "üîç" }
        default { "‚ÑπÔ∏è" }
    }
    
    Write-Host "[$timestamp] $prefix $Message" -ForegroundColor $colors[$Level]
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
function New-DirectorySafe {
    param(
        [string]$Path,
        [string]$LogLevel
    )
    
    try {
        if (-not (Test-Path $Path)) {
            $null = New-Item -ItemType Directory -Path $Path -Force
            Write-Log "–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $Path" "Verbose" $LogLevel
        }
        return $true
    }
    catch {
        Write-Log "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '$Path': $($_.Exception.Message)" "Error" $LogLevel
        return $false
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è PDF —Ñ–∞–π–ª–æ–≤
function Invoke-SelectivePdfExtraction {
    param(
        [string]$ArchivePath,
        [string]$OutputDirectory,
        [bool]$PreserveStructure,
        [bool]$Overwrite,
        [bool]$ShowProgressBar,
        [string]$LogLevel
    )
    
    $result = [ExtractionResult]::new()
    
    try {
        Write-Log "–ù–∞—á–∏–Ω–∞–µ–º —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ PDF —Ñ–∞–π–ª–æ–≤" "Info" $LogLevel
        Write-Log "–ò—Å—Ç–æ—á–Ω–∏–∫: $ArchivePath" "Verbose" $LogLevel
        Write-Log "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: $OutputDirectory" "Verbose" $LogLevel
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if (-not (New-DirectorySafe $OutputDirectory $LogLevel)) {
            throw "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"
        }
        
        # –û—Ç–∫—Ä—ã—Ç–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è (–±–µ–∑ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏)
        $archiveStream = [System.IO.File]::OpenRead($ArchivePath)
        $archive = [System.IO.Compression.ZipArchive]::new($archiveStream, [System.IO.Compression.ZipArchiveMode]::Read)
        
        try {
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
            $allEntries = $archive.Entries
            $result.TotalEntriesInArchive = $allEntries.Count
            $result.TotalArchiveSize = (Get-Item $ArchivePath).Length
            
            Write-Log "–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∞—Ä—Ö–∏–≤–µ: $($result.TotalEntriesInArchive)" "Info" $LogLevel
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è PDF —Ñ–∞–π–ª–æ–≤
            $pdfEntries = $allEntries | Where-Object { 
                $_.Name -match '\.pdf$' -and $_.Length -gt 0 
            }
            
            $result.PdfFilesFound = $pdfEntries.Count
            Write-Log "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: $($result.PdfFilesFound)" "Success" $LogLevel
            
            if ($result.PdfFilesFound -eq 0) {
                Write-Log "–í –∞—Ä—Ö–∏–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è" "Warning" $LogLevel
                return $result
            }
            
            # –°–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ PDF —Ñ–∞–π–ª–æ–≤
            $extractedCount = 0
            foreach ($entry in $pdfEntries) {
                try {
                    $extractedCount++
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
                    $relativePath = if ($PreserveStructure) {
                        $entry.FullName
                    } else {
                        $entry.Name
                    }
                    
                    $outputPath = Join-Path $OutputDirectory $relativePath
                    $outputDir = Split-Path $outputPath -Parent
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å
                    if ((Test-Path $outputPath) -and -not $Overwrite) {
                        Write-Log "–ü—Ä–æ–ø—É—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞: $relativePath" "Warning" $LogLevel
                        continue
                    }
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    if (-not (New-DirectorySafe $outputDir $LogLevel)) {
                        throw "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–∞"
                    }
                    
                    # –ü—Ä—è–º–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ ZIP –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    $entryStream = $entry.Open()
                    try {
                        $outputFileStream = [System.IO.File]::Create($outputPath)
                        try {
                            $entryStream.CopyTo($outputFileStream)
                            $result.ExtractedPdfSize += $entry.Length
                            $result.ExtractedFiles += $relativePath
                            
                            Write-Log "–ò–∑–≤–ª–µ—á–µ–Ω: $relativePath ($([math]::Round($entry.Length/1KB, 1)) –ö–ë)" "Success" $LogLevel
                            
                            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                            if ($ShowProgressBar) {
                                $percentComplete = [math]::Round(($extractedCount / $result.PdfFilesFound) * 100)
                                Write-Progress -Activity "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ PDF —Ñ–∞–π–ª–æ–≤" -Status "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ $extractedCount –∏–∑ $($result.PdfFilesFound)" -PercentComplete $percentComplete
                            }
                        }
                        finally {
                            $outputFileStream.Dispose()
                        }
                    }
                    finally {
                        $entryStream.Dispose()
                    }
                    
                    $result.PdfFilesExtracted++
                }
                catch {
                    $result.ErrorsOccurred++
                    $errorMsg = "–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è '$($entry.FullName)': $($_.Exception.Message)"
                    $result.Errors += $errorMsg
                    Write-Log $errorMsg "Error" $LogLevel
                }
            }
            
            if ($ShowProgressBar) {
                Write-Progress -Activity "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ PDF —Ñ–∞–π–ª–æ–≤" -Completed
            }
        }
        finally {
            $archive.Dispose()
            $archiveStream.Dispose()
        }
    }
    catch {
        $result.ErrorsOccurred++
        $errorMsg = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: $($_.Exception.Message)"
        $result.Errors += $errorMsg
        Write-Log $errorMsg "Error" $LogLevel
        throw
    }
    
    return $result
}

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
function Show-ExtractionReport {
    param(
        [ExtractionResult]$Result,
        [string]$LogLevel
    )
    
    Write-Log "`n=== –û–¢–ß–ï–¢ –û –í–´–ü–û–õ–ù–ï–ù–ò–ò –û–ü–ï–†–ê–¶–ò–ò ===" "Success" $LogLevel
    Write-Log "–ó–∞–ø–∏—Å–µ–π –≤ –∞—Ä—Ö–∏–≤–µ: $($Result.TotalEntriesInArchive)" "Info" $LogLevel
    Write-Log "PDF —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: $($Result.PdfFilesFound)" "Info" $LogLevel
    Write-Log "PDF —Ñ–∞–π–ª–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–æ: $($Result.PdfFilesExtracted)" "Success" $LogLevel
    
    if ($Result.ErrorsOccurred -gt 0) {
        Write-Log "–û—à–∏–±–æ–∫: $($Result.ErrorsOccurred)" "Error" $LogLevel
    }
    
    # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    $compressionRatio = if ($Result.TotalArchiveSize -gt 0) {
        [math]::Round((1 - ($Result.ExtractedPdfSize / $Result.TotalArchiveSize)) * 100, 1)
    } else { 0 }
    
    Write-Log "`n=== –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò ===" "Info" $LogLevel
    Write-Log "–†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: $([math]::Round($Result.TotalArchiveSize / 1MB, 2)) –ú–ë" "Info" $LogLevel
    Write-Log "–†–∞–∑–º–µ—Ä –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö PDF: $([math]::Round($Result.ExtractedPdfSize / 1MB, 2)) –ú–ë" "Success" $LogLevel
    Write-Log "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: $compressionRatio%" "Success" $LogLevel
    
    if ($LogLevel -eq "Verbose" -and $Result.ExtractedFiles.Count -gt 0) {
        Write-Log "`n=== –°–ü–ò–°–û–ö –ò–ó–í–õ–ï–ß–ï–ù–ù–´–• –§–ê–ô–õ–û–í ===" "Verbose" $LogLevel
        $Result.ExtractedFiles | ForEach-Object {
            Write-Log "  ‚Ä¢ $_" "Verbose" $LogLevel
        }
    }
    
    if ($Result.Errors.Count -gt 0) {
        Write-Log "`n=== –û–®–ò–ë–ö–ò ===" "Error" $LogLevel
        $Result.Errors | ForEach-Object {
            Write-Log "  ‚Ä¢ $_" "Error" $LogLevel
        }
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
try {
    Write-Log "=== –°–ï–õ–ï–ö–¢–ò–í–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï PDF –§–ê–ô–õ–û–í ===" "Success" $LogLevel
    Write-Log "PowerShell –≤–µ—Ä—Å–∏—è: $($PSVersionTable.PSVersion)" "Verbose" $LogLevel
    Write-Log "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: $([System.Environment]::OSVersion.VersionString)" "Verbose" $LogLevel
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    $SourceArchive = Resolve-Path $SourceArchive -ErrorAction Stop
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    $result = Invoke-SelectivePdfExtraction -ArchivePath $SourceArchive -OutputDirectory $DestinationDirectory -PreserveStructure $IncludeSubdirectories -Overwrite $OverwriteExisting -ShowProgressBar $ShowProgress -LogLevel $LogLevel
    
    # –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞
    Show-ExtractionReport -Result $result -LogLevel $LogLevel
    
    Write-Log "`nüéâ –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!" "Success" $LogLevel
    
    # –í–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    return $result
}
catch {
    Write-Log "`nüí• –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–û–ô!" "Error" $LogLevel
    Write-Log "–î–µ—Ç–∞–ª–∏: $($_.Exception.Message)" "Error" $LogLevel
    
    if ($LogLevel -eq "Verbose") {
        Write-Log "–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:" "Verbose" $LogLevel
        Write-Log $_.ScriptStackTrace "Verbose" $LogLevel
    }
    
    exit 1
} 